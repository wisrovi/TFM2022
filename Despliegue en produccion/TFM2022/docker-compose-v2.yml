version: "3.3"
services:
  # para la sincronizaci칩n de api y modelo se requiere
  # un contenedor de app (api_rest) y otro de clasificador (service_model)
  # estos dos deben compartir el mismo valor en la variable de entorno
  # esto se conocera como cluster

  # NOTA: entre mas cluster se tengan, mas clientes en paralelo se pueden atender

  # un cluster puede tener:
  # - 1 o m치s contenedores de app
  # - unicamente 1 contenedor de clasificador

  # para crear un cluster se debe:
  # - definir un nombre para el cluster (valor de la variable de entorno CLUSTER_NAME)
  # - crear uno o m치s contenedores de app con esta variable de entorno CLUSTER_NAME
  # - crear un contenedor de clasificador con esta variable de entorno CLUSTER_NAME

  # para crear mas de un cluster se debe:
  # - repetir el proceso anterior para cada cluster

  # en este ejemplo se crean 2 clusters
  # cluster1 y cluster2
  # cluster1 tiene 1 contenedores de app, su variable de entorno CLUSTER_NAME es cluster1
  # cluster2 tiene 1 contenedores de app (pero podria tener la cantidad que se requiera), su variable de entorno CLUSTER_NAME es cluster2
  # ambos clusters tienen un contenedor de clasificador, su variable de entorno CLUSTER_NAME es cluster1 y cluster2 respectivamente

  # todas las apps de cada cluster se debe conectar con el balanceador de carga
  # el balanceador de carga se encarga de distribuir las peticiones entre los contenedores de app
  # para ello se debe editar el archivo de configuraci칩n en /config_balanceo_carga/default.conf
  # poniendo desde la linea 9 el nombre de las apps de cada cluster

  # ********************************   cluster1  ********************************
  # cluster1 app 1
  cluster1_app:
    #image: wisrovi/tfm_2022:v2-app-dev
    image: wisrovi/tfm_2022:v2-app-prod
    ports:
      - 12345:80
    environment:
      - CLUSTER_NAME=cluster1
    volumes:
      - ./log:/log
    depends_on:
      - cluster1_clasificador

  # cluster1 clasificador
  cluster1_clasificador:
    image: wisrovi/tfm_2022:v2-model
    volumes:
      - ./log:/log
    environment:
      - CLUSTER_NAME=cluster1


  redis:
    image: redislabs/redismod
    #ports:
    #  - "6379:6379"
    environment:
      - SO=docker
    volumes:
      - ./cache_redis:/data
    command: --dir /data --loadmodule /usr/lib/redis/modules/redistimeseries.so

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - "8081:8081"
    depends_on:
      - redis
